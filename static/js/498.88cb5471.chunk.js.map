{"version":3,"file":"static/js/498.88cb5471.chunk.js","mappings":"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","sources":["helpers/localStrg.js","pages/EditContact/EditContact.styled.js","components/EditForm/EditForm.styled.js","components/EditForm/EditForm.jsx","pages/EditContact/EditContact.jsx"],"sourcesContent":["const save = (key, value) => {\n  try {\n    const serializedState = JSON.stringify(value);\n    localStorage.setItem(key, serializedState);\n  } catch (error) {\n    console.log(`Error during saving ${key} to local strage; `, error.message);\n  }\n};\n\nconst load = key => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    return serializedState === null ? undefined : JSON.parse(serializedState);\n  } catch (error) {\n    console.log(\n      `Error during getting ${key} from localStorage: `,\n      error.message\n    );\n  }\n};\n\nconst del = key => {\n  try {\n    localStorage.removeItem(key);\n  } catch (error) {\n    console.log(\n      `Error during deleting ${key}! from localStorage: `,\n      error.message\n    );\n  }\n};\n\nexport const localStrg = { save, load, del };\n\n\n","import styled from 'styled-components';\n// import { NavLink } from 'react-router-dom';\n\nexport const Overlay = styled.div`\n  background-color: #1e2129;\n  z-index: 300;\n  position: fixed;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  /* padding: 50px; */\n`;\n\nexport const Modal = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  margin: auto;\n  padding: 15px;\n  min-height: 40%;\n  min-width: 40%;\n  background-color: #bbd;\n  border: 3px solid red;\n  border-radius: 10px;\n`;\n\nexport const EditForm = styled.div`\n  margin: 5px;\n  height: 100%;\n  width: 100%;\n`;\n\nexport const ModalButton = styled.button`\n  display: inline-flex;\n  align-items: center;\n  margin: 20px 0 0 0;\n  /* justify-content: center; */\n  /* margin-bottom: 20px; */\n  /* margin-right: auto; */\n  padding: 8px 8px 8px 8px;\n  border-radius: 4px;\n  border: none;\n  height: 30px;\n  font-weight: 700;\n  font-size: 14px;\n  line-height: 1, 875;\n  text-transform: uppercase;\n  background-color: #2196f3;\n  color: #ffffff;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  cursor: pointer;\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :hover,\n  :focus {\n    border: 2px solid;\n    background-color: #21d4f3;\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n    transform: scale(1.01);\n  }\n`;\n\nexport const ModalTitle = styled.p`\n  margin: 0 0 20px 0;\n  font-weight: 700;\n  font-size: 24px;\n  line-height: 1, 875;\n`;\n","import styled from 'styled-components';\n\nexport const EditPhonebookForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  height: auto;\n  padding: 20px;\n  border: 2px solid #dbb858;\n  border-radius: 10px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n  background-color: #e5e7c5;\n`;\n\nexport const EditPhonebookLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1, 875;\n`;\n\nexport const EditPhonebookInput = styled.input`\n  font: inherit;\n  padding: 8px;\n  margin: 8px 0 8px 0;\n  max-width: 80%;\n  border-radius: 8px;\n  border-color: blue;\n`;\n\nexport const EditPhonebookButton = styled.button`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  margin: 20px auto 0 auto;\n  padding: 8px 8px 8px 8px;\n  border-radius: 4px;\n  border: none;\n  height: 30px;\n  font-weight: 700;\n  font-size: 14px;\n  line-height: 1, 875;\n  text-transform: uppercase;\n  background-color: #2196f3;\n  color: #ffffff;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  cursor: pointer;\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :hover,\n  :focus {\n    border: 2px solid;\n    background-color: #21d4f3;\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n    transform: scale(1.01);\n  }\n`;\n\n\nexport const EditPhonebookCheckbox = styled.input`\nmargin-right: 8px;\n  width: 24px;\n  height: 24px;\n  border: 1px solid black;\n`;\n\nexport const EditPhonebookCheckboxLabel = styled.label`\n  display: flex;\n  align-items: center;\n  margin: 0 0 10px 0;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1, 875;\n`;","import { useState } from 'react';\nimport {\n  useUpdateContactMutation,\n  useGetContactsQuery,\n} from '../../redux/contactsSliceApi';\nimport {\n  EditPhonebookForm,\n  EditPhonebookLabel,\n  EditPhonebookInput,\n  EditPhonebookButton,\n  EditPhonebookCheckbox,\n  EditPhonebookCheckboxLabel,\n} from './EditForm.styled';\nimport { localStrg } from '../../helpers/localStrg';\n\nexport default function EditForm({ initialValues, onSubmit }) {\n  const [updateContact] = useUpdateContactMutation();\n  const { data: contacts } = useGetContactsQuery();\n\n  // console.log (contacts)\n  let corectionContacts = contacts => {\n    if (contacts)\n      return contacts.filter(contact => contact.id === initialValues.id);\n  };\n\n  const contactForEdit = corectionContacts(contacts);\n  // console.log(\n  //   'contactForEdit:',\n  //   contactForEdit.at(0).name,\n  //   contactForEdit.at(0).number\n  // );\n  \n\n\n  const [name, setName] = useState(contactForEdit.at(0).name);\n  const [number, setNumber] = useState(contactForEdit.at(0).number);\n  const [personal, setPersonal] = useState(true);\n\n  // contactForEdit.map(({name, number})) => {\n  //   setName(name);\n  //   setNumber(number)\n  // }\n\n  const handleChange = event => {\n    switch (event.target.name) {\n      case 'name':\n        setName(event.target.value);\n        break;\n\n      case 'phone':\n        setNumber(event.target.value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = async value => {\n    value.preventDefault();\n\n    try {\n      await updateContact({ id: initialValues.id, name, number });\n      localStrg.save('currentContact', { name, number, personal });\n      \n    } catch (error) {\n      console.log(error);\n    }\n    updateLocalStorage ();\n    onSubmit();\n  };\n  \nfunction updateLocalStorage () {\n  if(!localStrg.load('keyContactsStore')) {\n    addContactToLocal()\n  } else {\n    editContactToLocal ()\n\n  }\n  \n}\n\nfunction addContactToLocal() {\n\n  if (!localStrg.load('keyContactsStore')) {\n    localStrg.save('keyContactsStore', []);\n    // console.log(localStrg.load('keyContactsStore'))\n    let currentContactsState = localStrg.load('keyContactsStore');\n    const currentContact = localStrg.load('currentContact');\n    // console.log('currentContact befor if:', currentContact);\n    // console.log('currentContactsState befor if:', currentContactsState);\n    (currentContactsState = [currentContact]);\n    localStrg.save('keyContactsStore', currentContactsState);\n  } else {\n    let currentContactsState = localStrg.load('keyContactsStore');\n    const currentContact = localStrg.load('currentContact');\n    currentContactsState.push(currentContact);\n    localStrg.save('keyContactsStore', currentContactsState);\n  }\n\n}\n\nfunction editContactToLocal () {\n  let currentContactsState = localStrg.load('keyContactsStore');\n  // console.log('currentContactsState:', currentContactsState);\n  let correctContactPerson;\n  let correctContactPersonIndex;\n  if (currentContactsState) {\n    correctContactPerson = currentContactsState.find(\n      contact => contact.name === contactForEdit.at(0).name\n    );\n    correctContactPersonIndex = currentContactsState.findIndex(\n      contact => contact.name === contactForEdit.at(0).name\n    );\n// localStrg.del('keyContactsStore');\n\ncurrentContactsState.splice(correctContactPersonIndex, 1, { name, number, personal });\nconsole.log('currentContactsState:', currentContactsState);\nlocalStrg.save('keyContactsStore', currentContactsState)\n\n  }\n  \nconsole.log('correctContactPerson:', correctContactPerson);\nconsole.log('correctContactPersonIndex:', correctContactPersonIndex);\n}\n\n  return (\n    <EditPhonebookForm onSubmit={handleSubmit}>\n      <EditPhonebookCheckboxLabel>\n        <EditPhonebookCheckbox\n          type=\"checkbox\"\n          checked={personal}\n          onChange={() => setPersonal(!personal)}\n        />\n        Personal contact\n      </EditPhonebookCheckboxLabel>\n      <EditPhonebookLabel>\n        Name\n        <EditPhonebookInput\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </EditPhonebookLabel>\n      <EditPhonebookLabel>\n        Number\n        <EditPhonebookInput\n          type=\"tel\"\n          name=\"phone\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </EditPhonebookLabel>\n      <EditPhonebookButton type=\"submit\">Save change</EditPhonebookButton>\n    </EditPhonebookForm>\n  );\n}\n","import { useNavigate, useParams } from 'react-router-dom';\n// import { useGetContactByIdQuery } from '../../redux/contactsSliceApi';\nimport { Overlay, Modal, ModalButton, ModalTitle } from './EditContact.styled';\nimport EditForm from '../../components/EditForm/EditForm';\n\nexport default function EditContact({name, number}) {\n  const params = useParams();\n  const contactId = params.id;\n  // const contactName = params.name;\n//   console.log('contactId in EditContact:', contactId );\n//  console.log('params:', params);\n  // const { data: contact, isLoading } = useGetContactByIdQuery(contactId);\n \n  // console.log('name', name);\n  const navigate = useNavigate();\n\n  const closeModal = () => navigate('/');\n\n  const handleUpdateContact = () => {\n    closeModal();\n  };\n\n  return (\n    <Overlay>\n      <Modal>\n        <ModalTitle>You can make changes to this contact</ModalTitle>\n        \n          <EditForm\n            initialValues={{\n              id: contactId,\n              name: name,\n              number: number,\n              // personal: contact.personal,\n            }}\n            onSubmit={handleUpdateContact}\n            // loading={isLoading}\n          />\n        \n        <ModalButton type=\"button\" onClick={closeModal}>\n          Close\n        </ModalButton>\n      </Modal>\n    </Overlay>\n  );\n}\n"],"names":["localStrg","save","key","value","serializedState","JSON","stringify","localStorage","setItem","error","console","log","message","load","getItem","undefined","parse","del","removeItem","Overlay","styled","Modal","ModalButton","ModalTitle","EditPhonebookForm","EditPhonebookLabel","EditPhonebookInput","EditPhonebookButton","EditPhonebookCheckbox","EditPhonebookCheckboxLabel","EditForm","initialValues","onSubmit","useUpdateContactMutation","updateContact","contactForEdit","contacts","filter","contact","id","corectionContacts","useGetContactsQuery","data","useState","at","name","setName","number","setNumber","personal","setPersonal","handleChange","event","target","handleSubmit","preventDefault","updateLocalStorage","correctContactPerson","correctContactPersonIndex","currentContactsState","find","findIndex","splice","editContactToLocal","currentContact","push","addContactToLocal","type","checked","onChange","pattern","title","required","EditContact","contactId","useParams","navigate","useNavigate","closeModal","onClick"],"sourceRoot":""}